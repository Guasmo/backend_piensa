
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para roles de usuario
enum Role {
  ADMIN
  USER
  SUPERADMIN
}

// Enum para estados de sesión
enum SessionStatus {
  ACTIVE
  COMPLETED
  INTERRUPTED
}

model Speaker {
  id                 Int      @id @default(autoincrement())
  name               String
  position           String
  state              Boolean  @default(false) // true = encendido, false = apagado
  batteryPercentage  Decimal  @db.Decimal(5, 2) // Porcentaje actual de batería (0.00-100.00)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relaciones
  usageSessions      UsageSession[]
  histories          History[]
  userspeakers       Userspeaker[]

  @@map("speakers")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  // Relaciones
  usageSessions UsageSession[]
  histories     History[]
  userspeakers  Userspeaker[]

  @@map("users")
}

// Tabla para registrar sesiones de uso (cuando se enciende/apaga un parlante)
model UsageSession {
  id                        Int           @id @default(autoincrement())
  speakerId                 Int
  userId                    Int
  startTime                 DateTime      @default(now())
  endTime                   DateTime?
  initialBatteryPercentage  Decimal?      @db.Decimal(5, 2)
  finalBatteryPercentage    Decimal?      @db.Decimal(5, 2)
  speakerName               String?
  speakerPosition           String?
  status                    SessionStatus @default(ACTIVE)
  
  // Add this field for additional metadata
  metadata                  Json?         // Store additional session metadata
  
  // Keep existing relations
  speaker           Speaker             @relation(fields: [speakerId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  energyMeasurements EnergyMeasurement[]
  history           History?

  @@map("usage_sessions")
}
// Tabla para registrar mediciones en tiempo real durante el uso
model EnergyMeasurement {
  id                Int      @id @default(autoincrement())
  usageSessionId    Int
  voltageHours      Decimal  @db.Decimal(10, 4) // ⚡ CAMPO AGREGADO
  wattsHours        Decimal  @db.Decimal(10, 4)
  ampereHours       Decimal  @db.Decimal(10, 4)
  batteryPercentage Decimal  @db.Decimal(5, 2)
  recordedAt        DateTime @default(now())
  
  // Add this field for raw ESP32 data
  rawData           Json?    // Store raw ESP32 data as JSON
  
  // Keep existing relations
  usageSession UsageSession @relation(fields: [usageSessionId], references: [id])

  @@map("energy_measurements")
}

// Tabla de historial (resumen final de cada sesión)
model History {
  id                        Int      @id @default(autoincrement())
  usageSessionId            Int      @unique
  speakerId                 Int
  speakerName               String
  speakerPosition           String
  userId                    Int
  startDate                 DateTime
  endDate                   DateTime
  durationMinutes           Int?
  avgVoltageHours           Decimal  @db.Decimal(10, 4)
  avgWattsHours             Decimal  @db.Decimal(10, 4)
  avgAmpereHours            Decimal  @db.Decimal(10, 4)
  totalVoltageHours         Decimal  @db.Decimal(10, 4)
  totalWattsHours           Decimal  @db.Decimal(10, 4)
  totalAmpereHours          Decimal  @db.Decimal(10, 4)
  initialBatteryPercentage  Decimal  @db.Decimal(5, 2)
  finalBatteryPercentage    Decimal  @db.Decimal(5, 2)
  batteryConsumed           Decimal  @db.Decimal(5, 2)
  createdAt                 DateTime @default(now())
  
  // Add this field for ESP32 specific data
  esp32Data                 Json?    // Store ESP32 specific data as JSON
  
  // Keep existing relations
  usageSession UsageSession @relation(fields: [usageSessionId], references: [id])
  speaker      Speaker      @relation(fields: [speakerId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("history")
}

model Userspeaker {
  id         Int      @id @default(autoincrement())
  userId     Int
  speakerId  Int
  assignedAt DateTime @default(now())

  // Relaciones
  user    User    @relation(fields: [userId], references: [id])
  speaker Speaker @relation(fields: [speakerId], references: [id])

  @@map("userspeakers")
}